{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/danielbau26/Aplicadas/blob/main/Cajero%20automatico\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "VR3AIHgdUTH-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#def consultarSaldo\n",
        "\n",
        "def consultarSaldo (saldo):\n",
        "\n"
      ],
      "metadata": {
        "id": "jslWQRvNVwJk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tdxma7dXQoSa",
        "outputId": "8b652027-976f-43ed-a6ac-ed9d2e5a351a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-----Menú-----\n",
            "¿Desea empezar o salir?\n",
            "1. Empezar  \n",
            "2. Salir\n",
            "1\n",
            "Empezar\n"
          ]
        }
      ],
      "source": [
        "\n",
        "#menu\n",
        "\n",
        "saldo= int(np.random.randint(0,5000000))\n",
        "menu = menu()\n",
        "\n",
        "if menu == 1 :\n",
        "  consultar_saldo(saldo)\n",
        "elif menu == 2:\n",
        "  saldo = depositar_dinero(saldo)\n",
        "elif menu == 3:\n",
        "  saldo = retirar_dinero(saldo)\n",
        "elif menu == 4:\n",
        "\n",
        "elif menu == 5:\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Menu\n",
        "\n",
        "def menu ():\n",
        "  print(\"-----Menú-----\")\n",
        "  print(\"¿Desea empezar o salir?\")\n",
        "  print(\"1. Consultar saldo\")\n",
        "  print(\"2. Depositar\")\n",
        "  print(\"3. Retirar\")\n",
        "  print(\"4. Transferir dinero\")\n",
        "  print(\"5. Salir\")\n",
        "\n",
        "  while True:\n",
        "    menu= int(input(\"\"))\n",
        "    if menu < 0 or menu > 5:\n",
        "      print(\"Opción no válida, intente de nuevo\")\n",
        "    else:\n",
        "      break\n",
        "\n",
        "    return menu"
      ],
      "metadata": {
        "id": "WGMysXWMaz1Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Función para consultar saldo\n",
        "\n",
        "def consultar_saldo (saldo):\n",
        "  print(f\"altual: {saldo}\")"
      ],
      "metadata": {
        "id": "CpwW1M_XaXh0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Función para depositar dinero\n",
        "\n",
        "def depositar_dinero (saldo):\n",
        "\n",
        "  while True:\n",
        "    dinero_depositado = int(input(\"Cuanto desea depositar? \"))\n",
        "    if dinero_depositado < 0:\n",
        "      print(\"No se puede depositar un valor negativo, vuelve a intentarlo\")\n",
        "    else:\n",
        "      break\n",
        "\n",
        "  print(f\"Dinero depositado: {dinero_depositado}\")\n",
        "  saldo = saldo + dinero_depositado\n",
        "  print(f\"Saldo actual: {saldo}\")\n",
        "  return saldo"
      ],
      "metadata": {
        "id": "JWfBi7tUcmKF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Función para retirar dinero\n",
        "\n",
        "def retirar_dinero (saldo):\n",
        "  print(f\"Su saldo actual es de: {saldo}\")\n",
        "  while True:\n",
        "    dinero_retirado = int(input(\"Cuanto desea retirar? \"))\n",
        "    if dinero_retirado > saldo:\n",
        "      print(f\"Estas retirando {dinero_retirado}, lo cual es mayor a tu saldo actual\")\n",
        "    else:\n",
        "      break\n",
        "\n",
        "  print(f\"Acabas de retirar {dinero_retirado}\")\n",
        "\n",
        "  return saldo"
      ],
      "metadata": {
        "id": "AYY6PTkScmdv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Función para transferir dinero\n",
        "\n",
        "def transferir_dinero (saldo):\n",
        "  print(f\"Su saldo actual es de: {saldo}\")\n",
        "\n",
        "  banco = 0\n",
        "  while True:\n",
        "    print(\"Seleccione a que banco desea tranferir el dinero: \")\n",
        "    print(\"1. Bancolombia\")\n",
        "    print(\"2. BBVA\")\n",
        "    print(\"3. Davivienda\")\n",
        "    print(\"4. Banco Caja social\")\n",
        "    print(\"6. Banco de Occidente\")\n",
        "    print(\"7. Banco de Bogotá\")\n",
        "    print(\"8. Banco Popular\")\n",
        "    print(\"9. Av Villas\")\n",
        "    banco = int(input(\"Seleccion: \"))\n",
        "    if banco < 0 or banco >10:\n",
        "      print(\"Opción no válida, intente de nuevo\")\n",
        "\n",
        "  while True:\n",
        "    if banco == 1:\n",
        "\n",
        "  while True:\n",
        "    dinero_transferido = int(input(\"Cuanto desea transferir\"))\n",
        "    if dinero_transferido > saldo:\n",
        "      print(f\"Estas transfiriendo {dinero_transferido}, lo cual es mayor a tu saldo actual\")\n",
        "    else:\n",
        "      break\n",
        "\n",
        ""
      ],
      "metadata": {
        "id": "cW5e1ZlZcmz8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "MJHM1vgVgang"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}